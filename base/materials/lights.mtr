table blinktable { { 0, 1 } }

table delayedBlinkTable { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1 } }

lights/defaultPointLight
{
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map lights/round.tga
		colored
		zeroClamp
	}
}

lights/blinkingRoundLight
{
	lightFalloffImage	makeintensity( lights/round_light_simple_falloff.tga )
	{
		forceHighQuality
		map lights/round.tga
		red 		( delayedBlinkTable [Parm4 + (time * (3 * Parm3)) ]) * Parm0
		green 		( delayedBlinkTable [Parm4 + (time * (3 * Parm3)) ]) * Parm1
		blue 		( delayedBlinkTable [Parm4 + (time * (3 * Parm3)) ]) * Parm2
		zeroClamp
	}
}

lights/blinkingGrateLight
{
	{
		forceHighQuality
		map lights/lightgratelight.tga
		red 		( delayedBlinkTable [Parm4 + (time * (3 * Parm3)) ]) * Parm0
		green 		( delayedBlinkTable [Parm4 + (time * (3 * Parm3)) ]) * Parm1
		blue 		( delayedBlinkTable [Parm4 + (time * (3 * Parm3)) ]) * Parm2
		zeroClamp
	}
}

lights/defaultProjectedLight
{
	{
		forceHighQuality
		map lights/square_light_simple.tga
		colored
		zeroClamp
	}
}

lights/squarelight
{
	lightFalloffImage	makeintensity( lights/squarelight1a.tga )
	{
		forceHighQuality
		map lights/square_light_simple.tga
		colored
		zeroClamp
	}
}

lights/square_light_simple
{
	lightFalloffImage	makeintensity( lights/squarelight1a.tga )
	{
		forceHighQuality
		map lights/square_light_simple.tga
		colored
		zeroClamp
	}
}

lights/basicFogLight
{
	fogLight
	lightFalloffImage	makeintensity( lights/square_light_simple.tga )
	{
		forceHighQuality
		map lights/square_light_simple.tga
	}
}

fogs/basicFog
{
	fogLight			// tell the engine it is fog and not a light
	noShadows
	{
		map		_fog	// the internal fog image
		colored			// take rgba from entity shaderparms
	}
}

lights/fogBlend
{
	blendLight
	noShadows

	lightFalloffImage	makeintensity( lights/square_light_simple.tga )

	{
		blend blend
		forceHighQuality
		map lights/square_light_simple.tga
		alphazeroclamp			// make sure it doesn't bleed over the edges
		colored					// take rgba from entity shaderparms
	}
}