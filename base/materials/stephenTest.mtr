stephenTest/stencilWrite
{
	sort far

    // stencil writing stage
	{
		Stencil
		{
			Ref 2
			Comp Always
			Pass Replace
		}

		blend add
		map textures/common/red
		maskDepth
		maskColor
		maskAlpha
	}
}

stephenTest/red
{
	sort medium
    // stencil writing stage
	{
		Stencil
		{
			Ref 1
			Comp Always
			Pass Replace
		}

		blend add
		map textures/common/red
	}
}

stephenTest/green
{
	sort medium
	
	// stencil testing stage
	{
		Stencil
		{
			Ref 2
			Comp equal
			Pass keep
			ZFail decrWrap
		}

		blend add
		map textures/common/green
	}
}

stephenTest/blue
{
	sort close
	
	// second stencil testing stage 
	{
		Stencil
		{
			Ref 1
			Comp equal
		}

		blend add
		map textures/common/blue
	}
}

stephenTest/mirrorTest
{
	discrete
	//translucent
	//twosided
	noshadows
	{
		blend gl_dst_color,gl_zero
		map _white
	}
	solid
	mirror
}

textures/sfx/flare
{
	noshadows
	translucent
	nonsolid
	deform flare 		4
	qer_editorimage		textures/editor/flare.tga
	{
		//if ( parm7 == 0 )
		blend		add
		map		_quadratic
		colored
		vertexcolor
	}
}

textures/test/cube
{
	//noSelfShadow
	qer_editorimage	textures/test/CubeColor.png
	diffusemap textures/test/CubeColor.png
	specularmap textures/test/CubeColorSpecular.png

	{
		maskcolor
		map makealpha(textures/test/beam1.tga)
		//	scroll	time * 3 , time * 0	
		forceHighQuality	
	}

	{
		blend gl_dst_alpha, gl_one
	    maskalpha
		map textures/test/dust.tga
		scale	 4 , 4
		rotate time * -.02
		scroll	time * .001 , time * .001
	}
}

textures/test/cube2
{
	//noSelfShadow
	qer_editorimage	textures/test/CubeColor2.png

	{
		blend diffusemap
		map textures/test/CubeColor2.png
	}

	{
		blend specularmap
		map textures/test/CubeSpecular2.png
	}

	{
		blend bumpmap
		map textures/test/CubeNormal.png
	}
}

material models/items/flashlight/beam1 {
	translucent
	deform tube
	twoSided
	
	{
		maskcolor
		map makealpha(textures/test/beam1.tga)
		//	scroll	time * 3 , time * 0	
		forceHighQuality	
	}

	{
		blend gl_dst_alpha, gl_one
	    maskalpha
		map textures/test/dust.tga
		scale	 4 , 4
		rotate time * -.02
		scroll	time * .001 , time * .001
	}
}