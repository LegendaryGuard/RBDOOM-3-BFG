/** Generated by RBDOOM-3-BFG */


interface Vector {
	x: number;
	y: number;
	z: number;
}

/**
* @type idClass                 
*/
declare class idClass {
	remove(): void;
}


/**
* @type rvmWeaponObject         
*/
declare interface rvmWeaponObject extends idClass {

	grabberGrabDistance( parm0: number ): void;

}

declare interface rvmWeaponFist extends rvmWeaponObject {}

declare interface idWeaponUnarmed extends rvmWeaponObject {}

declare interface idWeaponShotgun extends rvmWeaponObject {}

declare interface idWeaponRocketLauncher extends rvmWeaponObject {}

declare interface idWeaponFlashlight extends rvmWeaponObject {}


/**
* @type idThread                
*/
declare interface idThread {

	terminate( parm0: number ): void;

	pause(): void;

	wait( parm0: number ): void;

	waitFrame(): void;

	waitFor( parm0: idEntity ): void;

	waitForThread( parm0: number ): void;

	print( parm0: string ): void;

	println( parm0: string ): void;

	say( parm0: string ): void;

	assert( parm0: number ): void;

	trigger( parm0: idEntity ): void;

	setcvar( parm0: string, parm1: string ): void;

	getcvar( parm0: string ): string;

	random( parm0: number ): number;

	randomInt( parm0: number ): number;

	getTime(): number;

	killthread( parm0: string ): void;

	threadname( parm0: string ): void;

	getEntity( parm0: string ): idEntity;

	spawn( parm0: string ): idEntity;

	copySpawnArgs( parm0: idEntity ): void;

	setSpawnArg( parm0: string, parm1: string ): void;

	SpawnString( parm0: string, parm1: string ): string;

	SpawnFloat( parm0: string, parm1: number ): number;

	SpawnVector( parm0: string, parm1: Vector ): Vector;

	clearPersistantArgs(): void;

	setPersistantArg( parm0: string, parm1: string ): void;

	getPersistantString( parm0: string ): string;

	getPersistantFloat( parm0: string ): number;

	getPersistantVector( parm0: string ): Vector;

	angToForward( parm0: Vector ): Vector;

	angToRight( parm0: Vector ): Vector;

	angToUp( parm0: Vector ): Vector;

	sin( parm0: number ): number;

	cos( parm0: number ): number;

	asin( parm0: number ): number;

	acos( parm0: number ): number;

	sqrt( parm0: number ): number;

	vecNormalize( parm0: Vector ): Vector;

	vecLength( parm0: Vector ): number;

	DotProduct( parm0: Vector, parm1: Vector ): number;

	CrossProduct( parm0: Vector, parm1: Vector ): Vector;

	VecToAngles( parm0: Vector ): Vector;

	VecToOrthoBasisAngles( parm0: Vector ): Vector;

	rotateVector( parm0: Vector, parm1: Vector ): Vector;

	onSignal( parm0: number, parm1: idEntity, parm2: string ): void;

	clearSignalThread( parm0: number, parm1: idEntity ): void;

	setCamera( parm0: idEntity ): void;

	firstPerson(): void;

	trace( parm0: Vector, parm1: Vector, parm2: Vector, parm3: Vector, parm4: number, parm5: idEntity ): number;

	tracePoint( parm0: Vector, parm1: Vector, parm2: number, parm3: idEntity ): number;

	getTraceFraction(): number;

	getTraceEndPos(): Vector;

	getTraceNormal(): Vector;

	getTraceEntity(): idEntity;

	getTraceJoint(): string;

	getTraceBody(): string;

	fadeIn( parm0: Vector, parm1: number ): void;

	fadeOut( parm0: Vector, parm1: number ): void;

	fadeTo( parm0: Vector, parm1: number, parm2: number ): void;

	setShaderParm( parm0: number, parm1: number ): void;

	music( parm0: string ): void;

	warning( parm0: string ): void;

	error( parm0: string ): void;

	strLength( parm0: string ): number;

	strLeft( parm0: string, parm1: number ): string;

	strRight( parm0: string, parm1: number ): string;

	strSkip( parm0: string, parm1: number ): string;

	strMid( parm0: string, parm1: number, parm2: number ): string;

	strToFloat( parm0: string ): number;

	radiusDamage( parm0: Vector, parm1: idEntity, parm2: idEntity, parm3: idEntity, parm4: string, parm5: number ): void;

	isClient(): number;

	isMultiplayer(): number;

	getFrameTime(): number;

	getTicsPerSecond(): number;

	cacheSoundShader( parm0: string ): void;

	debugLine( parm0: Vector, parm1: Vector, parm2: Vector, parm3: number ): void;

	debugArrow( parm0: Vector, parm1: Vector, parm2: Vector, parm3: number, parm4: number ): void;

	debugCircle( parm0: Vector, parm1: Vector, parm2: Vector, parm3: number, parm4: number, parm5: number ): void;

	debugBounds( parm0: Vector, parm1: Vector, parm2: Vector, parm3: number ): void;

	drawText( parm0: string, parm1: Vector, parm2: number, parm3: Vector, parm4: number, parm5: number ): void;

	influenceActive(): number;

}

declare interface idPhysics extends idClass {}

declare interface idPhysics_StaticMulti extends idPhysics {}

declare interface idPhysics_Static extends idPhysics {}

declare interface idPhysics_Base extends idPhysics {}

declare interface idPhysics_RigidBody extends idPhysics_Base {}

declare interface idPhysics_Parametric extends idPhysics_Base {}

declare interface idPhysics_Actor extends idPhysics_Base {}

declare interface idPhysics_Player extends idPhysics_Actor {}

declare interface idPhysics_Monster extends idPhysics_Actor {}

declare interface idPhysics_AF extends idPhysics_Base {}


/**
* @type idLuaThread             
*/
declare interface idLuaThread {

	print( parm0: string ): void;

	println( parm0: string ): void;

	say( parm0: string ): void;

	assert( parm0: number ): void;

	trigger( parm0: idEntity ): void;

	setcvar( parm0: string, parm1: string ): void;

	getcvar( parm0: string ): string;

	random( parm0: number ): number;

	randomInt( parm0: number ): number;

	getTime(): number;

	getEntity( parm0: string ): idEntity;

	spawn( parm0: string ): idEntity;

	copySpawnArgs( parm0: idEntity ): void;

	setSpawnArg( parm0: string, parm1: string ): void;

	SpawnString( parm0: string, parm1: string ): string;

	SpawnFloat( parm0: string, parm1: number ): number;

	SpawnVector( parm0: string, parm1: Vector ): Vector;

	clearPersistantArgs(): void;

	setPersistantArg( parm0: string, parm1: string ): void;

	getPersistantString( parm0: string ): string;

	getPersistantFloat( parm0: string ): number;

	getPersistantVector( parm0: string ): Vector;

	angToForward( parm0: Vector ): Vector;

	angToRight( parm0: Vector ): Vector;

	angToUp( parm0: Vector ): Vector;

	sin( parm0: number ): number;

	cos( parm0: number ): number;

	asin( parm0: number ): number;

	acos( parm0: number ): number;

	sqrt( parm0: number ): number;

	vecNormalize( parm0: Vector ): Vector;

	vecLength( parm0: Vector ): number;

	DotProduct( parm0: Vector, parm1: Vector ): number;

	CrossProduct( parm0: Vector, parm1: Vector ): Vector;

	VecToAngles( parm0: Vector ): Vector;

	VecToOrthoBasisAngles( parm0: Vector ): Vector;

	rotateVector( parm0: Vector, parm1: Vector ): Vector;

	onSignal( parm0: number, parm1: idEntity, parm2: string ): void;

	clearSignalThread( parm0: number, parm1: idEntity ): void;

	setCamera( parm0: idEntity ): void;

	firstPerson(): void;

	trace( parm0: Vector, parm1: Vector, parm2: Vector, parm3: Vector, parm4: number, parm5: idEntity ): number;

	tracePoint( parm0: Vector, parm1: Vector, parm2: number, parm3: idEntity ): number;

	getTraceFraction(): number;

	getTraceEndPos(): Vector;

	getTraceNormal(): Vector;

	getTraceEntity(): idEntity;

	getTraceJoint(): string;

	getTraceBody(): string;

	fadeIn( parm0: Vector, parm1: number ): void;

	fadeOut( parm0: Vector, parm1: number ): void;

	fadeTo( parm0: Vector, parm1: number, parm2: number ): void;

	setShaderParm( parm0: number, parm1: number ): void;

	music( parm0: string ): void;

	warning( parm0: string ): void;

	error( parm0: string ): void;

	strLength( parm0: string ): number;

	strLeft( parm0: string, parm1: number ): string;

	strRight( parm0: string, parm1: number ): string;

	strSkip( parm0: string, parm1: number ): string;

	strMid( parm0: string, parm1: number, parm2: number ): string;

	strToFloat( parm0: string ): number;

	radiusDamage( parm0: Vector, parm1: idEntity, parm2: idEntity, parm3: idEntity, parm4: string, parm5: number ): void;

	isClient(): number;

	isMultiplayer(): number;

	getFrameTime(): number;

	getTicsPerSecond(): number;

	cacheSoundShader( parm0: string ): void;

	debugLine( parm0: Vector, parm1: Vector, parm2: Vector, parm3: number ): void;

	debugArrow( parm0: Vector, parm1: Vector, parm2: Vector, parm3: number, parm4: number ): void;

	debugCircle( parm0: Vector, parm1: Vector, parm2: Vector, parm3: number, parm4: number, parm5: number ): void;

	debugBounds( parm0: Vector, parm1: Vector, parm2: Vector, parm3: number ): void;

	drawText( parm0: string, parm1: Vector, parm2: number, parm3: Vector, parm4: number, parm5: number ): void;

	influenceActive(): number;

}

declare interface idForce extends idClass {}

declare interface idForce_Spring extends idForce {}

declare interface idForce_Grab extends idForce {}

declare interface idForce_Field extends idForce {}

declare interface idForce_Drag extends idForce {}

declare interface idForce_Constant extends idForce {}

declare interface LuaWeaponObject extends idClass {}

/**
* @type idEntity                
*/
declare class idEntity extends idClass {

	stateEntity: any;

	remove(): void;

	getName(): string;

	setName( parm0: string ): void;

	getEntityNum(): number;

	activateTargets( parm0: idEntity ): void;

	numTargets(): number;

	getTarget( parm0: number ): idEntity;

	randomTarget( parm0: string ): idEntity;

	bindToJoint( parm0: idEntity, parm1: string, parm2: number ): void;

	removeBinds(): void;

	bind( parm0: idEntity ): void;

	bindPosition( parm0: idEntity ): void;

	unbind(): void;

	setOwner( parm0: idEntity ): void;

	setModel( parm0: string ): void;

	setSkin( parm0: string ): void;

	getShaderParm( parm0: number ): number;

	setShaderParm( parm0: number, parm1: number ): void;

	setShaderParms( parm0: number, parm1: number, parm2: number, parm3: number ): void;

	setColor( parm0: number, parm1: number, parm2: number ): void;

	getColor(): Vector;

	isHidden(): number;

	hide(): void;

	show(): void;

	cacheSoundShader( parm0: string ): void;

	startSoundShader( parm0: string, parm1: number ): number;

	startSound( parm0: string, parm1: number, parm2: number ): number;

	stopSound( parm0: number, parm1: number ): void;

	fadeSound( parm0: number, parm1: number, parm2: number ): void;

	getWorldOrigin(): Vector;

	setWorldOrigin( parm0: Vector ): void;

	getOrigin(): Vector;

	setOrigin( parm0: Vector ): void;

	getAngles(): Vector;

	setAngles( parm0: Vector ): void;

	getLinearVelocity(): Vector;

	setLinearVelocity( parm0: Vector ): void;

	getAngularVelocity(): Vector;

	setAngularVelocity( parm0: Vector ): void;

	getSize(): Vector;

	setSize( parm0: Vector, parm1: Vector ): void;

	getMins(): Vector;

	getMaxs(): Vector;

	touches( parm0: idEntity ): number;

	setGuiParm( parm0: string, parm1: string ): void;

	setGuiFloat( parm0: string, parm1: number ): void;

	getNextKey( parm0: string, parm1: string ): string;

	setKey( parm0: string, parm1: string ): void;

	getKey( parm0: string ): string;

	getIntKey( parm0: string ): number;

	getFloatKey( parm0: string ): number;

	getVectorKey( parm0: string ): Vector;

	getEntityKey( parm0: string ): idEntity;

	restorePosition(): void;

	distanceTo( parm0: idEntity ): number;

	distanceToPoint( parm0: Vector ): number;

	startFx( parm0: string ): void;

	waitFrame(): void;

	wait( parm0: number ): void;

	hasFunction( parm0: string ): number;

	callFunction( parm0: string ): void;

	setNeverDormant( parm0: number ): void;

	setGui( parm0: number, parm1: string ): void;

	precacheGui( parm0: string ): void;

	getGuiParm( parm0: number, parm1: string ): string;

	getGuiParmFloat( parm0: number, parm1: string ): number;

	guiNamedEvent( parm0: number, parm1: string ): void;
}

declare interface spGamePortal extends idEntity {}


/**
* @type idWorldspawn            
*/
declare interface idWorldspawn extends idEntity {

	/** @override */
	remove(): void;

}


/**
* @type idVacuumSeparatorEntity 
*/
declare interface idVacuumSeparatorEntity extends idEntity {

	activate( parm0: idEntity ): void;

}

declare interface idVacuumEntity extends idEntity {}


/**
* @type idTrigger               
*/
declare interface idTrigger extends idEntity {

	enable(): void;

	disable(): void;

}


/**
* @type idTrigger_Touch         
*/
declare interface idTrigger_Touch extends idTrigger {

	activate( parm0: idEntity ): void;

}


/**
* @type idTrigger_Timer         
*/
declare interface idTrigger_Timer extends idTrigger {

	activate( parm0: idEntity ): void;

}


/**
* @type idTrigger_Hurt          
*/
declare interface idTrigger_Hurt extends idTrigger {

	activate( parm0: idEntity ): void;

}


/**
* @type idTrigger_Multi         
*/
declare interface idTrigger_Multi extends idTrigger {

	activate( parm0: idEntity ): void;

}


/**
* @type idTrigger_Flag          
*/
declare interface idTrigger_Flag extends idTrigger_Multi {

}


/**
* @type idTrigger_Fade          
*/
declare interface idTrigger_Fade extends idTrigger {

	activate( parm0: idEntity ): void;

}


/**
* @type idTrigger_EntityName    
*/
declare interface idTrigger_EntityName extends idTrigger {

	activate( parm0: idEntity ): void;

}


/**
* @type idTrigger_Count         
*/
declare interface idTrigger_Count extends idTrigger {

	activate( parm0: idEntity ): void;

}

declare interface idTextEntity extends idEntity {}

declare interface idTarget extends idEntity {}


/**
* @type idTarget_WaitForButton  
*/
declare interface idTarget_WaitForButton extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_Tip            
*/
declare interface idTarget_Tip extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_Show           
*/
declare interface idTarget_Show extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_SetShaderTime  
*/
declare interface idTarget_SetShaderTime extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_SetShaderParm  
*/
declare interface idTarget_SetShaderParm extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_SetPrimaryObjective
*/
declare interface idTarget_SetPrimaryObjective extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_SetModel       
*/
declare interface idTarget_SetModel extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_SetKeyVal      
*/
declare interface idTarget_SetKeyVal extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_SetInfluence   
*/
declare interface idTarget_SetInfluence extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_SetGlobalShaderTime
*/
declare interface idTarget_SetGlobalShaderTime extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_SetFov         
*/
declare interface idTarget_SetFov extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_SessionCommand 
*/
declare interface idTarget_SessionCommand extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_RumbleJoystick 
*/
declare interface idTarget_RumbleJoystick extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_RemoveWeapons  
*/
declare interface idTarget_RemoveWeapons extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_Remove         
*/
declare interface idTarget_Remove extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_LockDoor       
*/
declare interface idTarget_LockDoor extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_LightFadeOut   
*/
declare interface idTarget_LightFadeOut extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_LightFadeIn    
*/
declare interface idTarget_LightFadeIn extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_LevelTrigger   
*/
declare interface idTarget_LevelTrigger extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_GiveSecurity   
*/
declare interface idTarget_GiveSecurity extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_GiveEmail      
*/
declare interface idTarget_GiveEmail extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_Give           
*/
declare interface idTarget_Give extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_FadeSoundClass 
*/
declare interface idTarget_FadeSoundClass extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_FadeEntity     
*/
declare interface idTarget_FadeEntity extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_EndLevel       
*/
declare interface idTarget_EndLevel extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_EnableStamina  
*/
declare interface idTarget_EnableStamina extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_EnableLevelWeapons
*/
declare interface idTarget_EnableLevelWeapons extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_Damage         
*/
declare interface idTarget_Damage extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_Checkpoint     
*/
declare interface idTarget_Checkpoint extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_CallObjectFunction
*/
declare interface idTarget_CallObjectFunction extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idTarget_Achievement    
*/
declare interface idTarget_Achievement extends idTarget {

	activate( parm0: idEntity ): void;

}


/**
* @type idSpring                
*/
declare interface idSpring extends idEntity {

}

declare interface idSplinePath extends idEntity {}

declare interface idSpawnableEntity extends idEntity {}


/**
* @type idSound                 
*/
declare interface idSound extends idEntity {

	activate( parm0: idEntity ): void;

	On(): void;

	Off(): void;

}


/**
* @type idShockwave             
*/
declare interface idShockwave extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idShaking               
*/
declare interface idShaking extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idSecurityCamera        
*/
declare interface idSecurityCamera extends idEntity {

}


/**
* @type idPortalSky             
*/
declare interface idPortalSky extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idPlayerStart           
*/
declare interface idPlayerStart extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idPhantomObjects        
*/
declare interface idPhantomObjects extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idPathCorner            
*/
declare interface idPathCorner extends idEntity {

	randomPath(): idEntity;

}

declare interface idLocationSeparatorEntity extends idEntity {}

declare interface idLocationEntity extends idEntity {}


/**
* @type idLiquid                
*/
declare interface idLiquid extends idEntity {

}


/**
* @type idLight                 
*/
declare interface idLight extends idEntity {

	setShader( parm0: string ): void;

	getLightParm( parm0: number ): number;

	setLightParm( parm0: number, parm1: number ): void;

	setLightParms( parm0: number, parm1: number, parm2: number, parm3: number ): void;

	setRadiusXYZ( parm0: number, parm1: number, parm2: number ): void;

	setRadius( parm0: number ): void;

	/** @override */
	hide(): void;

	/** @override */
	show(): void;

	On(): void;

	Off(): void;

	activate( parm0: idEntity ): void;

	fadeOutLight( parm0: number ): void;

	fadeInLight( parm0: number ): void;

}


/**
* @type idItemRemover           
*/
declare interface idItemRemover extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idObjectiveComplete     
*/
declare interface idObjectiveComplete extends idItemRemover {

	/** @override */
	activate( parm0: idEntity ): void;

}


/**
* @type idItem                  
*/
declare interface idItem extends idEntity {

	activate( parm0: idEntity ): void;

	respawn(): void;

}

declare interface idVideoCDItem extends idItem {}

declare interface idPDAItem extends idItem {}


/**
* @type idObjective             
*/
declare interface idObjective extends idItem {

	/** @override */
	activate( parm0: idEntity ): void;

}


/**
* @type idMoveableItem          
*/
declare interface idMoveableItem extends idItem {

	gib( parm0: string ): void;

}

declare interface idMoveablePDAItem extends idMoveableItem {}


/**
* @type idItemTeam              
*/
declare interface idItemTeam extends idItem {

	flagreturn( parm0: idEntity ): void;

	takeflag( parm0: idEntity ): void;

	dropflag( parm0: number ): void;

	flagcapture(): void;

}

declare interface idItemPowerup extends idItem {}


/**
* @type idHarvestable           
*/
declare interface idHarvestable extends idEntity {

}

declare interface idGrabber extends idEntity {}


/**
* @type idFuncSmoke             
*/
declare interface idFuncSmoke extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idFuncRadioChatter      
*/
declare interface idFuncRadioChatter extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idFuncPortal            
*/
declare interface idFuncPortal extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idFuncMountedObject     
*/
declare interface idFuncMountedObject extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idFuncMountedWeapon     
*/
declare interface idFuncMountedWeapon extends idFuncMountedObject {

}


/**
* @type idStaticEntity          
*/
declare interface idStaticEntity extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idFuncShootProjectile   
*/
declare interface idFuncShootProjectile extends idStaticEntity {

	/** @override */
	activate( parm0: idEntity ): void;

}


/**
* @type idFuncEmitter           
*/
declare interface idFuncEmitter extends idStaticEntity {

	/** @override */
	activate( parm0: idEntity ): void;

}


/**
* @type idFuncSplat             
*/
declare interface idFuncSplat extends idFuncEmitter {

	/** @override */
	activate( parm0: idEntity ): void;

}


/**
* @type idFuncAASPortal         
*/
declare interface idFuncAASPortal extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idFuncAASObstacle       
*/
declare interface idFuncAASObstacle extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idForceField            
*/
declare interface idForceField extends idEntity {

	activate( parm0: idEntity ): void;

	Toggle(): void;

}


/**
* @type idExplodable            
*/
declare interface idExplodable extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idEntityFx              
*/
declare interface idEntityFx extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idTeleporter            
*/
declare interface idTeleporter extends idEntityFx {

}


/**
* @type idMover                 
*/
declare interface idMover extends idEntity {

	stopMoving(): void;

	stopRotating(): void;

	speed( parm0: number ): void;

	time( parm0: number ): void;

	accelTime( parm0: number ): void;

	decelTime( parm0: number ): void;

	moveTo( parm0: idEntity ): void;

	moveToPos( parm0: Vector ): void;

	move( parm0: number, parm1: number ): void;

	accelTo( parm0: number, parm1: number ): void;

	decelTo( parm0: number, parm1: number ): void;

	rotateDownTo( parm0: number, parm1: number ): void;

	rotateUpTo( parm0: number, parm1: number ): void;

	rotateTo( parm0: Vector ): void;

	rotate( parm0: Vector ): void;

	rotateOnce( parm0: Vector ): void;

	bob( parm0: number, parm1: number, parm2: Vector ): void;

	sway( parm0: number, parm1: number, parm2: Vector ): void;

	openPortal(): void;

	closePortal(): void;

	accelSound( parm0: string ): void;

	decelSound( parm0: string ): void;

	moveSound( parm0: string ): void;

	enableSplineAngles(): void;

	disableSplineAngles(): void;

	removeInitialSplineAngles(): void;

	startSpline( parm0: idEntity ): void;

	stopSpline(): void;

	activate( parm0: idEntity ): void;

	isMoving(): number;

	isRotating(): number;

}


/**
* @type idElevator              
*/
declare interface idElevator extends idMover {

	/** @override */
	activate( parm0: idEntity ): void;

	postArrival(): void;

	gotoFloor( parm0: number ): void;

	setGuiStates(): void;

}


/**
* @type idEarthQuake            
*/
declare interface idEarthQuake extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idMover_Binary          
*/
declare interface idMover_Binary extends idEntity {

	activate( parm0: idEntity ): void;

	enable(): void;

	disable(): void;

	openPortal(): void;

	closePortal(): void;

}


/**
* @type idPlat                  
*/
declare interface idPlat extends idMover_Binary {

}


/**
* @type idDoor                  
*/
declare interface idDoor extends idMover_Binary {

	/** @override */
	activate( parm0: idEntity ): void;

	open(): void;

	close(): void;

	lock( parm0: number ): void;

	isOpen(): number;

	isLocked(): number;

	/** @override */
	openPortal(): void;

	/** @override */
	closePortal(): void;

}


/**
* @type idDebris                
*/
declare interface idDebris extends idEntity {

}


/**
* @type idDamagable             
*/
declare interface idDamagable extends idEntity {

	activate( parm0: idEntity ): void;

}

declare interface idCursor3D extends idEntity {}


/**
* @type idCombatNode            
*/
declare interface idCombatNode extends idEntity {

	markUsed(): void;

	activate( parm0: idEntity ): void;

}

declare interface idMultiModelAF extends idEntity {}

declare interface idChain extends idMultiModelAF {}

declare interface idCamera extends idEntity {}


/**
* @type idCameraView            
*/
declare interface idCameraView extends idCamera {

	activate( parm0: idEntity ): void;

}


/**
* @type idCameraAnim            
*/
declare interface idCameraAnim extends idCamera {

	stop(): void;

	start(): void;

	activate( parm0: idEntity ): void;

}


/**
* @type idBrittleFracture       
*/
declare interface idBrittleFracture extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idMover_Periodic        
*/
declare interface idMover_Periodic extends idEntity {

}


/**
* @type idRotater               
*/
declare interface idRotater extends idMover_Periodic {

	activate( parm0: idEntity ): void;

}


/**
* @type idRiser                 
*/
declare interface idRiser extends idMover_Periodic {

	activate( parm0: idEntity ): void;

}

declare interface idPendulum extends idMover_Periodic {}

declare interface idBobber extends idMover_Periodic {}


/**
* @type idBeam                  
*/
declare interface idBeam extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idMoveable              
*/
declare interface idMoveable extends idEntity {

	activate( parm0: idEntity ): void;

	becomeNonSolid(): void;

	isAtRest(): number;

	enableDamage( parm0: number ): void;

}

declare interface idBarrel extends idMoveable {}


/**
* @type idExplodingBarrel       
*/
declare interface idExplodingBarrel extends idBarrel {

	/** @override */
	activate( parm0: idEntity ): void;

}


/**
* @type idProjectile            
*/
declare interface idProjectile extends idEntity {

	getProjectileState(): number;

	projectileCreateProjectile( parm0: idEntity, parm1: Vector, parm2: Vector ): void;

	projectileLaunchProjectile( parm0: Vector, parm1: Vector, parm2: Vector ): void;

	setGravity( parm0: number ): void;

}


/**
* @type idHomingProjectile      
*/
declare interface idHomingProjectile extends idProjectile {

	setEnemy( parm0: idEntity ): void;

}


/**
* @type idGuidedProjectile      
*/
declare interface idGuidedProjectile extends idProjectile {

	setEnemy( parm0: idEntity ): void;

}

declare interface idSoulCubeMissile extends idGuidedProjectile {}


/**
* @type idBFGProjectile         
*/
declare interface idBFGProjectile extends idProjectile {

}


/**
* @type idActivator             
*/
declare interface idActivator extends idEntity {

	activate( parm0: idEntity ): void;

}


/**
* @type idAnimatedEntity        
*/
declare interface idAnimatedEntity extends idEntity {

	getJointHandle( parm0: string ): number;

	clearAllJoints(): void;

	clearJoint( parm0: number ): void;

	setJointPos( parm0: number, parm1: number, parm2: Vector ): void;

	setJointAngle( parm0: number, parm1: number, parm2: Vector ): void;

	getJointPos( parm0: number ): Vector;

	getJointAngle( parm0: number ): Vector;

}


/**
* @type idWeapon                
*/
declare interface idWeapon extends idAnimatedEntity {

	getOwner(): idEntity;

	weaponState( parm0: string, parm1: number ): void;

	weaponReady(): void;

	weaponOutOfAmmo(): void;

	weaponReloading(): void;

	weaponHolstered(): void;

	weaponRising(): void;

	weaponLowering(): void;

	useAmmo( parm0: number ): void;

	addToClip( parm0: number ): void;

	ammoInClip(): number;

	ammoAvailable(): number;

	totalAmmoCount(): number;

	clipSize(): number;

	playAnim( parm0: number, parm1: string ): number;

	playCycle( parm0: number, parm1: string ): number;

	setBlendFrames( parm0: number, parm1: number ): void;

	getBlendFrames( parm0: number ): number;

	animDone( parm0: number, parm1: number ): number;

	nextWeapon(): void;

	/** @override */
	setSkin( parm0: string ): void;

	flashlight( parm0: number ): void;

	getLightParm( parm0: number ): number;

	setLightParm( parm0: number, parm1: number ): void;

	setLightParms( parm0: number, parm1: number, parm2: number, parm3: number ): void;

	launchProjectiles( parm0: number, parm1: number, parm2: number, parm3: number, parm4: number ): void;

	createProjectile(): idEntity;

	ejectBrass(): void;

	melee(): number;

	getWorldModel(): idEntity;

	allowDrop( parm0: number ): void;

	autoReload(): number;

	netReload(): void;

	isInvisible(): number;

	netEndReload(): void;

	grabber( parm0: number ): void;

	grabberHasTarget(): number;

	grabberGrabDistance( parm0: number ): void;

	launchProjectilesEllipse( parm0: number, parm1: number, parm2: number, parm3: number, parm4: number ): void;

	launchPowerup( parm0: string, parm1: number, parm2: number ): void;

	startWeaponSmoke(): void;

	stopWeaponSmoke(): void;

	startWeaponParticle( parm0: string ): void;

	stopWeaponParticle( parm0: string ): void;

	startWeaponLight( parm0: string ): void;

	stopWeaponLight( parm0: string ): void;

	getWeaponState(): string;

	setWeaponState( parm0: string ): void;

}


/**
* @type idTestModel             
*/
declare interface idTestModel extends idAnimatedEntity {

	leftFoot(): void;

	rightFoot(): void;

}


/**
* @type idAFEntity_Base         
*/
declare interface idAFEntity_Base extends idAnimatedEntity {

	SetConstraintPosition( parm0: string, parm1: Vector ): void;

}

declare interface idAFEntity_Vehicle extends idAFEntity_Base {}

declare interface idAFEntity_VehicleSimple extends idAFEntity_Vehicle {}

declare interface idAFEntity_VehicleFourWheels extends idAFEntity_Vehicle {}

declare interface idAFEntity_VehicleSixWheels extends idAFEntity_Vehicle {}


/**
* @type idAFEntity_VehicleAutomated
*/
declare interface idAFEntity_VehicleAutomated extends idAFEntity_VehicleSixWheels {

	setVelocity( parm0: number ): void;

	setTorque( parm0: number ): void;

	setSteeringSpeed( parm0: number ): void;

	setWaypoint( parm0: idEntity ): void;

}

declare interface idAFEntity_SteamPipe extends idAFEntity_Base {}


/**
* @type idAFEntity_Gibbable     
*/
declare interface idAFEntity_Gibbable extends idAFEntity_Base {

	gib( parm0: string ): void;

}


/**
* @type idAnimated              
*/
declare interface idAnimated extends idAFEntity_Gibbable {

	activate( parm0: idEntity ): void;

	startRagdoll(): void;

	footstep(): void;

	leftFoot(): void;

	rightFoot(): void;

	launchMissiles( parm0: string, parm1: string, parm2: string, parm3: string, parm4: number, parm5: number ): void;

	setAnimation( parm0: string ): void;

	getAnimationLength(): number;

}


/**
* @type idActor                 
*/
declare interface idActor extends idAFEntity_Gibbable {

	enableEyeFocus(): void;

	disableEyeFocus(): void;

	footstep(): void;

	leftFoot(): void;

	rightFoot(): void;

	EnableWalkIK(): void;

	DisableWalkIK(): void;

	EnableLegIK( parm0: number ): void;

	DisableLegIK( parm0: number ): void;

	preventPain( parm0: number ): void;

	disablePain(): void;

	enablePain(): void;

	getPainAnim(): string;

	setAnimPrefix( parm0: string ): void;

	stopAnim( parm0: number, parm1: number ): void;

	playAnim( parm0: number, parm1: string ): number;

	playCycle( parm0: number, parm1: string ): number;

	idleAnim( parm0: number, parm1: string ): number;

	setSyncedAnimWeight( parm0: number, parm1: number, parm2: number ): void;

	setBlendFrames( parm0: number, parm1: number ): void;

	getBlendFrames( parm0: number ): number;

	animState( parm0: number, parm1: string, parm2: number ): void;

	getAnimState( parm0: number ): string;

	inAnimState( parm0: number, parm1: string ): number;

	finishAction( parm0: string ): void;

	animDone( parm0: number, parm1: number ): number;

	overrideAnim( parm0: number ): void;

	enableAnim( parm0: number, parm1: number ): void;

	hasAnim( parm0: number, parm1: string ): number;

	checkAnim( parm0: number, parm1: string ): void;

	chooseAnim( parm0: number, parm1: string ): string;

	animLength( parm0: number, parm1: string ): number;

	animDistance( parm0: number, parm1: string ): number;

	hasEnemies(): number;

	nextEnemy( parm0: idEntity ): idEntity;

	closestEnemyToPoint( parm0: Vector ): idEntity;

	/** @override */
	stopSound( parm0: number, parm1: number ): void;

	setNextState( parm0: string ): void;

	setState( parm0: string ): void;

	getState(): string;

	getHead(): idEntity;

	setDamageGroupScale( parm0: string, parm1: number ): void;

	setDamageGroupScaleAll( parm0: number ): void;

	getDamageGroupScale( parm0: string ): number;

	setDamageCap( parm0: number ): void;

	setWaitState( parm0: string ): void;

	getWaitState(): string;

}


/**
* @type idPlayer                
*/
declare interface idPlayer extends idActor {

	getButtons(): number;

	getMove(): Vector;

	getViewAngles(): Vector;

	stopFxFov(): void;

	enableWeapon(): void;

	disableWeapon(): void;

	getCurrentWeapon(): string;

	getPreviousWeapon(): string;

	selectWeapon( parm0: string ): void;

	getWeaponEntity(): idEntity;

	openPDA(): void;

	inPDA(): number;

	exitTeleporter(): void;

	stopAudioLog(): void;

	hideTip(): void;

	levelTrigger(): void;

	giveInventoryItem( parm0: string ): void;

	removeInventoryItem( parm0: string ): void;

	getIdealWeapon(): string;

	weaponAvailable( parm0: string ): number;

	setPowerupTime( parm0: number, parm1: number ): void;

	isPowerupActive( parm0: number ): number;

	startWarp(): void;

	stopHelltime( parm0: number ): void;

	toggleBloom( parm0: number ): void;

	setBloomParms( parm0: number, parm1: number ): void;

}


/**
* @type idAI                    
*/
declare interface idAI extends idActor {

	activate( parm0: idEntity ): void;

	findEnemy( parm0: number ): idEntity;

	findEnemyAI( parm0: number ): idEntity;

	findEnemyInCombatNodes(): idEntity;

	closestReachableEnemyOfEntity( parm0: idEntity ): idEntity;

	heardSound( parm0: number ): idEntity;

	setEnemy( parm0: idEntity ): void;

	clearEnemy(): void;

	muzzleFlash( parm0: string ): void;

	createMissile( parm0: string ): idEntity;

	attackMissile( parm0: string ): idEntity;

	fireMissileAtTarget( parm0: string, parm1: string ): idEntity;

	launchMissile( parm0: Vector, parm1: Vector ): idEntity;

	launchHomingMissile(): void;

	setHomingMissileGoal(): void;

	launchProjectile( parm0: string ): void;

	attackMelee( parm0: string ): number;

	directDamage( parm0: idEntity, parm1: string ): void;

	radiusDamageFromJoint( parm0: string, parm1: string ): void;

	attackBegin( parm0: string ): void;

	attackEnd(): void;

	meleeAttackToJoint( parm0: string, parm1: string ): number;

	randomPath(): idEntity;

	canBecomeSolid(): number;

	becomeSolid(): void;

	becomeNonSolid(): void;

	becomeRagdoll(): number;

	stopRagdoll(): void;

	setHealth( parm0: number ): void;

	getHealth(): number;

	allowDamage(): void;

	ignoreDamage(): void;

	getCurrentYaw(): number;

	turnTo( parm0: number ): void;

	turnToPos( parm0: Vector ): void;

	turnToEntity( parm0: idEntity ): void;

	moveStatus(): number;

	stopMove(): void;

	moveToCover(): void;

	moveToEnemy(): void;

	moveToEnemyHeight(): void;

	moveOutOfRange( parm0: idEntity, parm1: number ): void;

	moveToAttackPosition( parm0: idEntity, parm1: string ): void;

	wander(): void;

	moveToEntity( parm0: idEntity ): void;

	moveToPosition( parm0: Vector ): void;

	slideTo( parm0: Vector, parm1: number ): void;

	facingIdeal(): number;

	faceEnemy(): void;

	faceEntity( parm0: idEntity ): void;

	waitAction( parm0: string ): void;

	getCombatNode(): idEntity;

	enemyInCombatCone( parm0: idEntity, parm1: number ): number;

	waitMove(): void;

	getJumpVelocity( parm0: Vector, parm1: number, parm2: number ): Vector;

	getTrajectoryToPlayer(): Vector;

	entityInAttackCone( parm0: idEntity ): number;

	canSee( parm0: idEntity ): number;

	setTalkTarget( parm0: idEntity ): void;

	getTalkTarget(): idEntity;

	setTalkState( parm0: number ): void;

	enemyRange(): number;

	enemyRange2D(): number;

	getEnemy(): idEntity;

	getEnemyPos(): Vector;

	getEnemyEyePos(): Vector;

	predictEnemyPos( parm0: number ): Vector;

	canHitEnemy(): number;

	canHitEnemyFromAnim( parm0: string ): number;

	canHitEnemyFromJoint( parm0: string ): number;

	enemyPositionValid(): number;

	chargeAttack( parm0: string ): void;

	testChargeAttack(): number;

	testAnimMoveTowardEnemy( parm0: string ): number;

	testAnimMove( parm0: string ): number;

	testMoveToPosition( parm0: Vector ): number;

	testMeleeAttack(): number;

	testAnimAttack( parm0: string ): number;

	burn(): void;

	preBurn(): void;

	setSmokeVisibility( parm0: number, parm1: number ): void;

	numSmokeEmitters(): number;

	clearBurn(): void;

	stopThinking(): void;

	getTurnDelta(): number;

	getMoveType(): number;

	setMoveType( parm0: number ): void;

	saveMove(): void;

	restoreMove(): void;

	allowMovement( parm0: number ): void;

	enableClip(): void;

	disableClip(): void;

	enableGravity(): void;

	disableGravity(): void;

	enableAFPush(): void;

	disableAFPush(): void;

	setFlySpeed( parm0: number ): void;

	setFlyOffset( parm0: number ): void;

	clearFlyOffset(): void;

	getClosestHiddenTarget( parm0: string ): idEntity;

	getRandomTarget( parm0: string ): idEntity;

	travelDistanceToPoint( parm0: Vector ): number;

	travelDistanceToEntity( parm0: idEntity ): number;

	travelDistanceBetweenPoints( parm0: Vector, parm1: Vector ): number;

	travelDistanceBetweenEntities( parm0: idEntity, parm1: idEntity ): number;

	lookAt( parm0: idEntity, parm1: number ): void;

	lookAtEnemy( parm0: number ): void;

	setBoneMod( parm0: number ): void;

	throwMoveable(): void;

	throwAF(): void;

	/** @override */
	getAngles(): Vector;

	/** @override */
	setAngles( parm0: Vector ): void;

	kill(): void;

	wakeOnFlashlight( parm0: number ): void;

	locateEnemy(): void;

	kickObstacles( parm0: idEntity, parm1: number ): void;

	getObstacle(): idEntity;

	pushPointIntoAAS( parm0: Vector ): Vector;

	getTurnRate(): number;

	setTurnRate( parm0: number ): void;

	animTurn( parm0: number ): void;

	allowHiddenMovement( parm0: number ): void;

	triggerParticles( parm0: string ): void;

	findActorsInBounds( parm0: Vector, parm1: Vector ): idEntity;

	canReachPosition( parm0: Vector ): number;

	canReachEntity( parm0: idEntity ): number;

	canReachEnemy(): number;

	getReachableEntityPosition( parm0: idEntity ): Vector;

	moveToPositionDirect( parm0: Vector ): void;

	avoidObstacles( parm0: number ): void;

	triggerFX( parm0: string, parm1: string ): void;

	startEmitter( parm0: string, parm1: string, parm2: string ): idEntity;

	getEmitter( parm0: string ): idEntity;

	stopEmitter( parm0: string ): void;

}


/**
* @type idAFEntity_WithAttachedHead
*/
declare interface idAFEntity_WithAttachedHead extends idAFEntity_Gibbable {

	/** @override */
	gib( parm0: string ): void;

	activate( parm0: idEntity ): void;

}


/**
* @type idAFEntity_Harvest      
*/
declare interface idAFEntity_Harvest extends idAFEntity_WithAttachedHead {

}


/**
* @type idAFEntity_Generic      
*/
declare interface idAFEntity_Generic extends idAFEntity_Gibbable {

	activate( parm0: idEntity ): void;

}


/**
* @type idAFEntity_ClawFourFingers
*/
declare interface idAFEntity_ClawFourFingers extends idAFEntity_Base {

	setFingerAngle( parm0: number ): void;

	stopFingers(): void;

}

declare interface idAFAttachment extends idAnimatedEntity {}


/**
* @type LuaEntity               
*/
declare interface LuaEntity extends idAnimatedEntity {

	playAnimation( parm0: number, parm1: string, parm2: number ): void;

}


/**
* @type EnvironmentProbe        
*/
declare interface EnvironmentProbe extends idEntity {

	getEnvprobeParm( parm0: number ): number;

	setEnvprobeParm( parm0: number, parm1: number ): void;

	setEnvprobeParms( parm0: number, parm1: number, parm2: number, parm3: number ): void;

	/** @override */
	hide(): void;

	/** @override */
	show(): void;

	On(): void;

	Off(): void;

	activate( parm0: idEntity ): void;

	fadeOutEnvprobe( parm0: number ): void;

	fadeInEnvprobe( parm0: number ): void;

}

declare const sys: idLuaThread;

declare interface Weapon {
	Register(ent: any): void
	Think(ent: any): void
	SendEvent(ent: any, event: any): void
}